(()=>{"use strict";const e="a97f91dc3154744c7757bda7928c308f";async function t(e){const t=document.getElementById("weather-container"),d=document.getElementById("searchbar");e.then((function(e){if(!e)return;if(t.querySelector("#weather-card")){const e=t.querySelector("#weather-card");t.removeChild(e)}const s=function(e){const t=document.createElement("div");t.setAttribute("id","weather-card");const d=document.createElement("div");d.classList.add("weather-card-header");const s=document.createElement("h2"),a=document.createElement("p");a.textContent="°C",a.classList.add("active");const c=document.createElement("p");c.textContent="/";const o=document.createElement("p");o.textContent="°F";const i=document.createElement("div");i.classList.add("temp-toggle"),i.appendChild(a),i.appendChild(c),i.appendChild(o),i.addEventListener("click",(()=>{if(a.classList.contains("active")){a.classList.remove("active"),o.classList.add("active");const t=n(e.temp.toFixed());l.textContent=` Temperature: ${t}°F`;const d=n(e.temp_feels_like.toFixed());m.textContent=`Feels like: ${d}°F`}else o.classList.contains("active")&&(o.classList.remove("active"),a.classList.add("active"),l.textContent=`Temperature: ${e.temp.toFixed()}°C`,m.textContent=`Feels like: ${e.temp_feels_like.toFixed()}°C`)}));const r=document.createElement("p");r.classList.add("capitalize");const l=document.createElement("p"),m=document.createElement("p");m.setAttribute("id","temp-feels-like");const u=document.createElement("p"),p=document.createElement("p");return s.textContent=`${e.city}`,r.textContent=`${e.desc}`,l.textContent=` Temperature: ${e.temp.toFixed()}°C`,m.textContent=`Feels like: ${e.temp_feels_like.toFixed()}°C`,u.textContent=`Humidity: ${e.humidity}%`,p.textContent=`Wind: ${e.wind}`,"clear sky"===(C=e.desc)&&(document.body.style.backgroundImage="url('../dist/assets/clearsky.jpg')"),C.includes("clouds")&&(document.body.style.backgroundImage="url('../dist/assets/clouds.jpg')"),C.includes("rain")&&(document.body.style.backgroundImage="url('../dist/assets/rain.jpg')"),C.includes("snow")&&(document.body.style.backgroundImage="url('../dist/assets/snow.jpg')"),"mist"===C&&(document.body.style.backgroundImage="url('../dist/assets/mist.jpg')"),"thunderstorm"===C&&(document.body.style.backgroundImage="url('../dist/assets/thunderstorm.jpg')"),d.appendChild(s),d.appendChild(i),t.appendChild(d),t.appendChild(r),t.appendChild(l),t.appendChild(m),t.appendChild(u),t.appendChild(p),t;var C}(e);t.appendChild(s),d.value=""}))}function n(e){return 9*e/5+32}async function d(t){const n=`https://api.openweathermap.org/data/2.5/weather?q=${t}&units=metric&APPID=${e}`,d=await fetch(n,{mode:"cors"});try{const e=await d.json();return{city:e.name,desc:e.weather[0].description,temp:e.main.temp,temp_feels_like:e.main.feels_like,humidity:e.main.humidity,wind:e.wind.speed}}catch(e){return void function(){const e=document.getElementById("searchbar"),t=document.getElementById("error-message");""===e.value.trim()?(t.style.backgroundColor="rgba(0, 0, 0, 0.7)",t.textContent="Please enter a city name!"):(t.style.backgroundColor="rgba(0, 0, 0, 0.7)",t.textContent="Location was not found"),setTimeout((function(){t.textContent="",t.style.backgroundColor="transparent",console.clear()}),2500)}()}}const s=document.getElementById("searchbar"),a=document.getElementById("search-button");document.addEventListener("DOMContentLoaded",(()=>{t(d("izmir"))})),a.addEventListener("click",(()=>{t(d(s.value))})),s.addEventListener("keypress",(e=>{"Enter"===e.key&&t(d(s.value))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,